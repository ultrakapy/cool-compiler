CLASS
TYPEID A
'{'
OBJECTID var
':'
TYPEID Int
ASSIGN
INT_CONST 0
';'
OBJECTID value
'('
')'
':'
TYPEID Int
'{'
OBJECTID var
'}'
';'
OBJECTID set_var
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID SELF_TYPE
'{'
'{'
OBJECTID var
ASSIGN
OBJECTID num
';'
OBJECTID self
';'
'}'
'}'
';'
OBJECTID method1
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID SELF_TYPE
'{'
OBJECTID self
'}'
';'
OBJECTID method2
'('
OBJECTID num1
':'
TYPEID Int
','
OBJECTID num2
':'
TYPEID Int
')'
':'
TYPEID B
'{'
'('
LET
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
OBJECTID num1
'+'
OBJECTID num2
';'
'('
NEW
TYPEID B
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
OBJECTID method3
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID C
'{'
'('
LET
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
'~'
OBJECTID num
';'
'('
NEW
TYPEID C
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
OBJECTID method4
'('
OBJECTID num1
':'
TYPEID Int
','
OBJECTID num2
':'
TYPEID Int
')'
':'
TYPEID D
'{'
IF
OBJECTID num2
'<'
OBJECTID num1
THEN
'('
LET
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
OBJECTID num1
'-'
OBJECTID num2
';'
'('
NEW
TYPEID D
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
')'
ELSE
'('
LET
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
OBJECTID num2
'-'
OBJECTID num1
';'
'('
NEW
TYPEID D
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
')'
FI
'}'
';'
OBJECTID method5
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID E
'{'
'('
LET
OBJECTID x
':'
TYPEID Int
ASSIGN
INT_CONST 1
IN
'{'
'('
LET
OBJECTID y
':'
TYPEID Int
ASSIGN
INT_CONST 1
IN
WHILE
OBJECTID y
LE
OBJECTID num
LOOP
'{'
OBJECTID x
ASSIGN
OBJECTID x
'*'
OBJECTID y
';'
OBJECTID y
ASSIGN
OBJECTID y
'+'
INT_CONST 1
';'
'}'
POOL
')'
';'
'('
NEW
TYPEID E
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
'}'
';'
CLASS
TYPEID B
INHERITS
TYPEID A
'{'
OBJECTID method5
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID E
'{'
'('
LET
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
OBJECTID num
'*'
OBJECTID num
';'
'('
NEW
TYPEID E
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
'}'
';'
CLASS
TYPEID C
INHERITS
TYPEID B
'{'
OBJECTID method6
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID A
'{'
'('
LET
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
'~'
OBJECTID num
';'
'('
NEW
TYPEID A
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
OBJECTID method5
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID E
'{'
'('
LET
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
OBJECTID num
'*'
OBJECTID num
'*'
OBJECTID num
';'
'('
NEW
TYPEID E
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
'}'
';'
CLASS
TYPEID D
INHERITS
TYPEID B
'{'
OBJECTID method7
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID Bool
'{'
'('
LET
OBJECTID x
':'
TYPEID Int
ASSIGN
OBJECTID num
IN
IF
OBJECTID x
'<'
INT_CONST 0
THEN
OBJECTID method7
'('
'~'
OBJECTID x
')'
ELSE
IF
INT_CONST 0
'='
OBJECTID x
THEN
BOOL_CONST true
ELSE
IF
INT_CONST 1
'='
OBJECTID x
THEN
BOOL_CONST false
ELSE
IF
INT_CONST 2
'='
OBJECTID x
THEN
BOOL_CONST false
ELSE
OBJECTID method7
'('
OBJECTID x
'-'
INT_CONST 3
')'
FI
FI
FI
FI
')'
'}'
';'
'}'
';'
CLASS
TYPEID E
INHERITS
TYPEID D
'{'
OBJECTID method6
'('
OBJECTID num
':'
TYPEID Int
')'
':'
TYPEID A
'{'
'('
LET
OBJECTID x
':'
TYPEID Int
IN
'{'
OBJECTID x
ASSIGN
OBJECTID num
'/'
INT_CONST 8
';'
'('
NEW
TYPEID A
')'
'.'
OBJECTID set_var
'('
OBJECTID x
')'
';'
'}'
')'
'}'
';'
'}'
';'
CLASS
TYPEID A2I
'{'
OBJECTID c2i
'('
OBJECTID char
':'
TYPEID String
')'
':'
TYPEID Int
'{'
IF
OBJECTID char
'='
LONGERROR
LONGERROR
LONGERROR
STR_CONST ""
';'
'}'
FI
FI
FI
FI
FI
FI
FI
FI
FI
FI
'}'
';'
OBJECTID a2i
'('
OBJECTID s
':'
TYPEID String
')'
':'
TYPEID Int
'{'
IF
OBJECTID s
'.'
OBJECTID length
'('
')'
'='
INT_CONST 0
THEN
INT_CONST 0
ELSE
IF
OBJECTID s
'.'
OBJECTID substr
'('
INT_CONST 0
','
INT_CONST 1
')'
'='
LONGERROR
STR_CONST ""
ELSE
'('
LET
OBJECTID next
':'
TYPEID Int
ASSIGN
OBJECTID i
'/'
INT_CONST 10
IN
OBJECTID i2a_aux
'('
OBJECTID next
')'
'.'
OBJECTID concat
'('
OBJECTID i2c
'('
OBJECTID i
'-'
OBJECTID next
'*'
INT_CONST 10
')'
')'
')'
FI
'}'
';'
'}'
';'
CLASS
TYPEID Main
INHERITS
TYPEID IO
'{'
OBJECTID char
':'
TYPEID String
';'
OBJECTID avar
':'
TYPEID A
';'
OBJECTID a_var
':'
TYPEID A
';'
OBJECTID flag
':'
TYPEID Bool
ASSIGN
BOOL_CONST true
';'
OBJECTID menu
'('
')'
':'
TYPEID String
'{'
'{'
OBJECTID out_string
'('
LONGERROR
':'
LONGERROR
OBJECTID n
LONGERROR
LONGERROR
':'
LONGERROR
OBJECTID n
LONGERROR
':'
LONGERROR
OBJECTID n
LONGERROR
':'
LONGERROR
OBJECTID n
LONGERROR
LONGERROR
':'
LONGERROR
OBJECTID n
LONGERROR
LONGERROR
':'
LONGERROR
OBJECTID n
LONGERROR
':'
LONGERROR
OBJECTID n
LONGERROR
LONGERROR
':'
LONGERROR
OBJECTID n
STR_CONST ");\n\t out_string("
LONGERROR
OBJECTID tTo
OBJECTID get
OBJECTID a
NEW
OBJECTID number
'.'
'.'
'.'
OBJECTID enter
OBJECTID j
':'
LONGERROR
OBJECTID n
STR_CONST ");\n\t out_string("
LONGERROR
OBJECTID tTo
OBJECTID quit
'.'
'.'
'.'
OBJECTID enter
OBJECTID q
':'
LONGERROR
OBJECTID n
LONGERROR
OBJECTID n
LONGERROR
LONGERROR
STR_CONST ");\n         in_string();\n      }\n   };\n\n   get_int() : Int {\n      {\n\t (let z : A2I <- new A2I in\n\t    (let s : String <- prompt() in\n\t       z.a2i(s)\n\t    )\n         );\n      }\n   };\n\n   is_even(num : Int) : Bool {\n      (let x : Int <- num in\n            if x < 0 then is_even(~x) else\n            if 0 = x then true else\n\t    if 1 = x then false else\n\t          is_even(x - 2)\n\t    fi fi fi\n      )\n   };\n\n   class_type(var : A) : SELF_TYPE {\n      case var of\n\t a : A => out_string("
TYPEID Class
OBJECTID type
OBJECTID is
OBJECTID now
TYPEID A
LONGERROR
OBJECTID n
LONGERROR
TYPEID B
LONGERROR
OBJECTID n
LONGERROR
TYPEID C
LONGERROR
OBJECTID n
LONGERROR
TYPEID D
LONGERROR
OBJECTID n
LONGERROR
TYPEID E
LONGERROR
OBJECTID n
STR_CONST ");\n\t o : Object => out_string("
TYPEID Oooops
LONGERROR
OBJECTID n
STR_CONST ");\n      esac\n   };\n \n   print(var : A) : SELF_TYPE {\n     (let z : A2I <- new A2I in\n\t{\n\t   out_string(z.i2a(var.value()));\n\t   out_string("
STR_CONST ");\n\t}\n     )\n   };\n\n   main() : Object {\n      {\n         avar <- (new A);\n         while flag loop\n            {\n\t       -- avar <- (new A).set_var(get_int());\n\t       out_string("
OBJECTID number
STR_CONST ");\n\t       print(avar);\n\t       if is_even(avar.value()) then\n\t          out_string("
OBJECTID is
OBJECTID even
ERROR "!"
LONGERROR
OBJECTID n
LONGERROR
ERROR "!"
LONGERROR
OBJECTID n
LONGERROR
STR_CONST ");\n\t\t                  abort(); 0;\n\t\t               };\n                     esac else\n                  if char = "
OBJECTID c
STR_CONST " then -- diff\n                     {\n                        a_var <- (new A).set_var(get_int());\n\t                avar <- (new D).method4(avar.value(), a_var.value());\n\t             } else\n                  if char = "
OBJECTID d
STR_CONST " then avar <- (new C)@A.method5(avar.value()) else\n\t\t          -- factorial\n                  if char = "
OBJECTID e
STR_CONST " then avar <- (new C)@B.method5(avar.value()) else\n\t\t\t  -- square\n                  if char = "
OBJECTID f
STR_CONST " then avar <- (new C)@C.method5(avar.value()) else\n\t\t\t  -- cube\n                  if char = "
OBJECTID g
STR_CONST " then -- multiple of 3?\n\t\t      if ((new D).method7(avar.value()))\n\t\t                       then -- avar <- (new A).method1(avar.value())\n\t\t\t {\n\t                    out_string("
OBJECTID number
LONGERROR
LONGERROR
LONGERROR
LONGERROR
STR_CONST ");\n\t\t\t          print(x);\n\t\t\t          out_string("
OBJECTID times
INT_CONST 8
OBJECTID with
OBJECTID a
OBJECTID remainder
OF
STR_CONST ");\n\t\t\t\t  (let a : A2I <- new A2I in\n\t\t\t\t     {\n\t\t\t                out_string(a.i2a(r));\n\t\t\t                out_string("
LONGERROR
OBJECTID n
STR_CONST ");\n\t\t\t\t     }\n\t\t\t\t  ); -- end let a:\n\t\t\t       }\n                            ); -- end let r:\n\t\t\t    avar <- x;\n\t\t         } \n\t\t      )  -- end let x:\n\t\t      else\n                  if char = "
OBJECTID j
LONGERROR
